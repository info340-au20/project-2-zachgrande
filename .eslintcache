[{"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/index.js":"1","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Track.js":"2","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Form.js":"3","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/App.js":"4","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/JournalLog.js":"5","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Entry.js":"6","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutEntry.js":"7","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/history.js":"8","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/NavigationBar.js":"9","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutUs.js":"10","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/MoodSelect.js":"11"},{"size":1649,"mtime":1608184618363,"results":"12","hashOfConfig":"13"},{"size":561,"mtime":1608184853731,"results":"14","hashOfConfig":"13"},{"size":6850,"mtime":1608184457587,"results":"15","hashOfConfig":"13"},{"size":6960,"mtime":1608184828812,"results":"16","hashOfConfig":"13"},{"size":335,"mtime":1608176745713,"results":"17","hashOfConfig":"13"},{"size":1110,"mtime":1608184468044,"results":"18","hashOfConfig":"13"},{"size":758,"mtime":1608181535917,"results":"19","hashOfConfig":"13"},{"size":87,"mtime":1607575723998,"results":"20","hashOfConfig":"13"},{"size":481,"mtime":1607976851395,"results":"21","hashOfConfig":"13"},{"size":1137,"mtime":1608184491621,"results":"22","hashOfConfig":"13"},{"size":1372,"mtime":1608184685271,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"13ftmlp",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/index.js",["47"],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Track.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Form.js",["48","49"],"import fetchTrack from './Track.js';\nimport { useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nfunction Form(prop) {\n  // Establish our variables from the prop\n  const user = prop.currentUser;\n  let entries = prop.entries;\n  let formValid = prop.formValid;\n\n  let entryObj = {\n    inputTitle: \"\",\n    inputDate: \"\",\n    inputDescription: \"\",\n    inputSong: \"\",\n  }\n  let entryFormArray = [\n    {input: entryObj.inputTitle, err: \"\",id:\"inputTitle\", name: \"title\", type: \"text\", label: \"Post Title\", aria: \"Entry Title\", placeholder: \"What do you want to title this post?\"},\n    {input: entryObj.inputDate,  err: \"\", id:\"inputDate\", name: \"date\", type: \"date\", label: \"Day\", aria: \"Date\"},\n    {input: entryObj.inputDescription, err: \"\", id:\"inputDescription\", name: \"description\", type: \"text\", label: \"How was your day?\", aria: \"Day Description\", placeholder: \"mm/dd/yyyy\"},\n    {input: entryObj.inputSong, err: \"\", id:\"inputSong\", name: \"song\",type: \"text\", label: \"Search for Today's Song\", aria: \"Song Search\", placeholder: \"Search\"},\n  ]\n \n  // Base appearance of form without error checks  \n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isInvalid, setIsInvalid] = useState(\"\");\n  let errorMessage = \"\";\n\n\n  function MakeForm() {\n    let handleInput = (event) => {\n      const inputValue = event.target.value;\n      const inputName = event.target.id;\n\n      entryObj[inputName] = inputValue;\n        if(!isSubmitted){\n          event.target.classList = \"form-control form-control-lg\";\n          errorMessage = \"\";\n        } \n        if(inputValue !== \"\" && isSubmitted){\n          event.target.classList = \"form-control form-control-lg is-valid\";\n          errorMessage = \"\";\n        } \n        if (inputValue === \"\" && isSubmitted){\n          event.target.classList = \"form-control form-control-lg is-invalid\";\n          errorMessage = \"Please provide a \" + inputName.replace(\"input\", \"\").toLowerCase() + \".\";\n        }\n\n      entryFormArray = [\n        {input: entryObj.inputTitle, id:\"inputTitle\", name: \"title\", type: \"text\", label: \"Post Title\", aria: \"Entry Title\", placeholder: \"What do you want to title this post?\"},\n        {input: entryObj.inputDate,  id:\"inputDate\", name: \"date\", type: \"date\", label: \"Day\", aria: \"Date\"},\n        {input: entryObj.inputDescription, id:\"inputDescription\", name: \"description\", type: \"text\", label: \"How was your day?\", aria: \"Day Description\", placeholder: \"mm/dd/yyyy\"},\n        {input: entryObj.inputSong, id:\"inputSong\", name: \"song\",type: \"text\", label: \"Search for Today's Song\", aria: \"Song Search\", placeholder: \"Search\"},\n      ]\n    }\n    \n    let allForm = entryFormArray.map((obj) => {\n      let textBox = <div></div>;\n      if (obj.id === \"inputDescription\"){\n        if(!isSubmitted) {\n        textBox = (\n          <textarea className=\"form-control form-control-lg\" id={obj.id} rows=\"3\" aria-label={obj.aria} onChange={handleInput}></textarea>\n        )\n        }\n        if(isSubmitted && isInvalid){\n          textBox = (\n          <div>\n            <textarea className=\"form-control form-control-lg is-invalid\" id={obj.id} rows=\"3\" aria-label={obj.aria} onChange={handleInput}></textarea>\n            <div class=\"invalid-feedback\">Please provide a {obj.name}.</div>\n          </div>\n          )\n        } \n        if(isSubmitted && !isInvalid){\n          textBox = (\n            <textarea className=\"form-control form-control-lg is-valid\" id={obj.id} rows=\"3\" aria-label={obj.aria} onChange={handleInput}></textarea>\n          )      \n        }\n      } else {\n        if(!isSubmitted) {\n          textBox = (\n            <input type={obj.type} className=\"form-control form-control-lg\" id={obj.id} aria-label={obj.aria} placeholder={obj.placeholder} onChange={handleInput} />\n          ) \n        }\n        if(isSubmitted && isInvalid){\n          textBox = (\n            <div>\n              <input type={obj.type} className=\"form-control form-control-lg is-invalid\" id={obj.id} aria-label={obj.aria} placeholder={obj.placeholder} onChange={handleInput} />\n              <div class=\"invalid-feedback\">Please provide a {obj.name}.</div>\n            </div>\n          )\n        } \n        if(isSubmitted && !isInvalid){\n          textBox = (\n            <input type={obj.type} className=\"form-control form-control-lg is-valid\" id={obj.id} aria-label={obj.aria} placeholder={obj.placeholder} onChange={handleInput} />\n          )      \n        }\n      }\n      return (\n        <div className=\"form-group\" key={obj}>\n            <label htmlFor={obj.id}>{obj.label}</label>\n            {textBox}\n        </div>\n      )\n    })\n\n    return (\n      <div>\n       {allForm} \n      </div>\n    )\n  }\n  \n  let isDisabled = '';\n  let error = false;\n\n  // When a user submits the form, modify the state\n  let handleSubmit = (event) => {\n    event.preventDefault();\n    setIsSubmitted(true);\n\n    // Error handling\n    entryFormArray.map((obj) => {\n      if(obj.input === '') {\n        formValid(false);\n        setIsInvalid(true);\n      } else {\n        formValid(true);\n        setIsInvalid(false);\n      }\n    })\n\n    let newEntriesArray = [];\n\n    // Pre-process our existing entries for the new state\n    if (entries !== []) {\n      newEntriesArray = entries.map((entry) => {\n        return entry;\n      })\n    }\n\n    // Add the final entry to the state and keep the program moving\n    const finalizeUserInput = (searchResults) => {\n      // Extract the fetch data, top result\n      searchResults = searchResults.results[0];\n\n      // Select the song elements to go in the entry\n      let songEntry = [searchResults.artworkUrl100, searchResults.artistName, searchResults.trackName];\n\n      const newEntry = {\n        postTitle: entryObj.inputTitle,\n        date: entryObj.inputDate,\n        dayDescription: entryObj.inputDescription,\n        moodRating: prop.mood,\n        artwork: songEntry[0],\n        artist: songEntry[1],\n        songTitle: songEntry[2],\n        time: firebase.database.ServerValue.TIMESTAMP,\n        user: user.uid\n      }\n\n      // Append an additional entry to the local state\n      newEntriesArray.push(newEntry);\n\n      // ADD A NEW ENTRY TO THE DATABASE\n      // Get a reference to the database child\n      const entryRef = firebase.database().ref('entries');\n      entryRef.push(newEntry);\n    }\n\n    // The final step of our form, ensure nothing is computed until fetch completes\n    fetchTrack(entryObj.inputSong, finalizeUserInput);\n\n  }\n\n  return (\n    <section id=\"landingPage\">\n      <form>\n        <MakeForm />\n        <button className={\"btn btn-primary \" + isDisabled} id=\"submit\" onClick={handleSubmit} aria-disabled={error}>Done</button>\n        <div className=\"song-loading-spinner disabled\"></div>\n        <div className=\"errors\"></div>\n      </form>\n    </section>\n  )\n}\n\nexport default Form;\n","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/App.js",["50","51"],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/JournalLog.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Entry.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutEntry.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/history.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/NavigationBar.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutUs.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/MoodSelect.js",[],{"ruleId":"52","severity":1,"message":"53","line":17,"column":1,"nodeType":"54","messageId":"55","endLine":17,"endColumn":96},{"ruleId":"56","severity":1,"message":"57","line":47,"column":11,"nodeType":"58","messageId":"59","endLine":47,"endColumn":23},{"ruleId":"60","severity":1,"message":"61","line":123,"column":30,"nodeType":"62","messageId":"63","endLine":123,"endColumn":32},{"ruleId":"56","severity":1,"message":"64","line":61,"column":9,"nodeType":"58","messageId":"59","endLine":61,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":127,"column":12,"nodeType":"67","endLine":127,"endColumn":24},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'errorMessage' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleChange' is assigned a value but never used.","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute"]