[{"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/index.js":"1","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutUs.js":"2","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/App.js":"3","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Track.js":"4"},{"size":862,"mtime":1607381853296,"results":"5","hashOfConfig":"6"},{"size":1159,"mtime":1607388506758,"results":"7","hashOfConfig":"6"},{"size":9648,"mtime":1607388211899,"results":"8","hashOfConfig":"6"},{"size":1689,"mtime":1607328889924,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13ftmlp",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/index.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutUs.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/App.js",["20","21"],"//import src from '*.avif';\nimport React, { useState } from 'react';\nimport { Route, Switch, Link, Redirect, NavLink } from 'react-router-dom';\nimport { Navbar } from 'react-bootstrap';\nimport AboutPage from './AboutUs.js';\nimport { renderTrack, fetchTrack } from './Track.js';\n//import Form from './Form.js';\n//import { Button } from 'reactstrap';\n\nfunction App() {\n  // This is the state of the app, where user journal entries are maintained\n  // An entry has several components:\n  // - a title\n  // - a date\n  // - a description\n  // - a mood rating\n  // - a song\n  const [entries, modifyEntries] = useState([]);\n\n  // const [pageDisplay, setPageDisplay] = useState();\n\n  // const handleNav = (event) => {\n  //   if (event.currentTarget.classList.contains(\"homePage\")) {\n  //     setPageDisplay(<JournalLog logs={entries} />)\n  //   }\n  //   if (event.currentTarget.classList.contains(\"landingPage\")) {\n  //     setPageDisplay(<Form entries={entries} modifyEntries={handleChange} completionAction={sendUserHome} />)\n  //   }\n  //   if (event.currentTarget.classList.contains(\"about-us\")) {\n  //     setPageDisplay(<AboutPage />)\n  //   }\n  // }\n\n  const handleChange = (e) => {\n    modifyEntries(e);\n  }\n\n  const renderJournalLog = (routerProps) => {\n    if (entries.length === 0) {\n      return (\n        <div>\n          <p>You have not created any journal entries!</p>\n          <p>You can create an entry by visiting the <NavLink to=\"create-entry\" className=\"nav-link\" activeClassName={\"activeLink\"}>Create an Entry</NavLink> tab.</p>\n        </div>\n      )\n    } else {\n      return <JournalLog {...routerProps} logs={entries} />\n    }\n  }\n\n  const renderForm = (routerProps) => {\n    return <Form {...routerProps} entries={entries} modifyEntries={handleChange} completionAction={sendUserHome} />\n  }\n\n  const sendUserHome = () => {\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"page-header\">\n        <h1><Link to=\"/\">SongNotes</Link></h1>\n        <NavigationBar />\n        {/* <div>\n          <nav>\n            <ul>\n              <li>\n                <img \n                  className=\"icon homePage\" \n                  role=\"button\" \n                  src=\"img/logotransparent.png\" \n                  alt=\"logo\"\n                  onClick={handleNav}\n                />\n              </li>\n              <li>\n                <button className=\"btn btn-primary btn-lg landingPage\" onClick={handleNav}>\n                  Make Entry\n               </button>\n              </li>\n            </ul>\n          </nav>\n         </div> */}\n        <nav className=\"row\">\n          <div className=\"col-3\">\n            <Switch>\n              <Route exact path=\"/\" render={renderJournalLog} />\n              <Route path=\"/create-entry\" render={renderForm} />\n              <Route path=\"/about-us\" component={AboutPage} />\n              <Redirect to=\"/\" />\n            </Switch>\n          </div>\n        </nav>\n\n\n      </header>\n\n      <main>\n        {/*<JournalLog />\n        <LandingPage />\n        <AboutPage />*/}\n        {/* {pageDisplay} */}\n      </main>\n\n      <footer>\n        <div className=\"footer-copyright text-center py-3\"> &copy; INFO 340 AA -\n            {/* <span role=\"button\" className=\"about-us\" onClick={handleNav}> About Us</span> */}\n            <NavLink exact to=\"/about-us\" className=\"nav-link-1\" activeClassName={\"activeLink\"}> About Us</NavLink>\n\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nfunction NavigationBar() {\n  return (\n    <Navbar bg=\"primary\">\n      <li><NavLink exact to=\"/\" className=\"nav-link\" activeClassName={\"activeLink\"}>Home</NavLink></li>\n      <li><NavLink to=\"create-entry\" className=\"nav-link\" activeClassName={\"activeLink\"}>Create an Entry</NavLink></li>\n    </Navbar>\n  )\n}\n\nfunction JournalLog(prop) {\n  let count = 0;\n  return (\n    <section id=\"journalLog\">\n      {/* Does not work currently, will be replaced by future sorting options */}\n      {/* <div className=\"btn-group-sm d-flex justify-content-sm-center justify-content-lg-end p-3\" role=\"group\" aria-label=\"viewing mode buttons\">\n        <button className=\"btn btn-secondary album-btn\">Album Covers</button>\n        <button className=\"btn btn-secondary color-btn\">Mood Colors</button>\n      </div> */}\n\n      <div className=\"container\">\n        {prop.logs.map((log) => {\n          count++;\n          return <EntryLog key={count} log={log} />\n        })}\n      </div>\n\n    </section>\n  )\n}\n\nfunction EntryLog(prop) {\n  let log = prop.log;\n  return (\n    <div className=\"card mb-4\">\n      <div className={\"card-header color \" + log.mood}>\n        <img className=\"today album-test\" src={log.album} alt=\"album cover\" />\n        <p>{\"Song: \" + log.trackName}</p>\n        <h2 className=\"entry-title\">{log.postTitle}</h2>\n        <p className=\"date\">{log.date}</p>\n        <p>{log.dayDescription}</p>\n        <button className=\"btn btn-secondary\">\n          Expand\n        </button>\n      </div>\n    </div>\n  )\n}\n\n// Similar code is in Form.js, moved here to ensure global variables update\nfunction Form(prop) {\n  // Establish our variables from the prop\n  let entries = prop.entries;\n  let modifyEntries = prop.modifyEntries;\n\n  // When a user submits the form, modify the state\n  let handleSubmit = (event) => {\n    event.preventDefault();\n    let userTitle = document.querySelector(\"#inputTitle\").value;\n    let userDate = document.querySelector(\"#inputDate\").value;\n    let userBody = document.querySelector(\"#inputBody\").value;\n    let songSearch = document.querySelector('#songSearch').value;\n\n    let newEntriesArray = [];\n\n    if (entries !== []) {\n      newEntriesArray = entries.map((entry) => {\n        return entry;\n      })\n    }\n\n    let fetchResults = fetchTrack(songSearch);\n    // [artwork URL, artist name, song title]\n\n    // APPEND an additional entry\n    newEntriesArray.push({\n      postTitle: userTitle,\n      date: userDate,\n      dayDescription: userBody,\n      //moodRating: moodInput,\n      artwork: fetchResults[0],\n      artist: fetchResults[1],\n      songTitle: fetchResults[2]\n    })\n\n    // Replace the old state\n    modifyEntries(newEntriesArray);\n    prop.completionAction();\n  }\n\n  return (\n    <section id=\"landingPage\">\n\n      <form>\n        <div className=\"form-group\">\n          <label htmlFor=\"inputTitle\">Post Title</label>\n          <input type=\"text\" className=\"form-control form-control-lg\" id=\"inputTitle\" aria-label=\"Entry Title\" placeholder=\"What do you want to title this post?\" />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"inputDate\">Day</label>\n          <input type=\"date\" id=\"inputDate\" className=\"form-control form-control-lg\" aria-label=\"Date\" required />\n          <div id=\"dateFeedback\" className=\"invalid-feedback\"></div>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"inputBody\">How was your day?</label>\n          <textarea className=\"form-control\" id=\"inputBody\" rows=\"3\"></textarea>\n        </div>\n        <div className=\"form-group\">\n          <p role=\"label\">Today's Mood Rating</p>\n          {/*<div className=\"mood-rating\">\n            <div aria-label=\"calm select\" className=\"moodbtn\"><img onClick={handleClick} className=\"calmbtn\" src=\"img/mood_buttons/calm.jpg\" alt=\"calm\" /></div>\n            <div aria-label=\"happy select\" className=\"moodbtn\"><img onClick={handleClick} className=\"happybtn\" src=\"img/mood_buttons/happy.jpg\" alt=\"happy\" /></div>\n            <div aria-label=\"anxious select\" className=\"moodbtn\"><img onClick={handleClick} className=\"anxiousbtn\" src=\"img/mood_buttons/anxious.jpg\" alt=\"anxious\" /></div>\n            <div aria-label=\"sad select\" className=\"moodbtn\"><img onClick={handleClick} className=\"sadbtn\" src=\"img/mood_buttons/sad.jpg\" alt=\"sad\" /></div>\n          </div>*/}\n          <MoodSelect />\n          <div id=\"moodFeedback\" className=\"invalid-feedback\"></div>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"songSearch\">Search for Today's Song</label>\n          <span className=\"glyphicon glyphicon-search\"></span>\n          <input className=\"form-control\" type=\"text\" id=\"songSearch\" placeholder=\"Search\" aria-label=\"Search\" />\n        </div>\n        <button className=\"btn btn-primary\" id=\"submit\" onClick={handleSubmit}>Done</button>\n      </form>\n\n    </section>\n  )\n}\n\nfunction MoodSelect() {\n\n  let moodOptions = [\n    { id: 'calm', selected: false },\n    { id: 'happy', selected: false },\n    { id: 'anxious', selected: false },\n    { id: 'sad', selected: false }\n  ];\n\n  const [moodInput, setMoodInput] = useState();\n  const handleClick = (event) => {\n    let mood = event.currentTarget.classList.value;\n    //event.currentTarget.src = \"img/mood_buttons/\" + mood + \"_clicked\" + \".jpg\";\n    //event.currentTarget.alt = mood + \"selected\"; \n    setMoodInput(mood);\n  }\n  // console.log(moodInput) //need to pass this to the parent component\n\n  let selectText = \"\";\n  let clickText = \"\";\n  let moodButtons = moodOptions.map((obj) => {\n    if (obj.id === moodInput) {\n      obj.selected = true;\n    } else {\n      obj.selected = false;\n    }\n    if (obj.selected) {\n      selectText = \" selected\"\n      clickText = \"_clicked\"\n    } else {\n      selectText = \"\"\n      clickText = \"\"\n    }\n    return (\n      <div key={obj.id} aria-label={obj.id + \"select\"} className=\"moodbtn\">\n        <img\n          onClick={handleClick}\n          className={obj.id}\n          src={\"img/mood_buttons/\" + obj.id + clickText + \".jpg\"}\n          alt={obj.id + selectText}\n        />\n      </div>\n    )\n  })\n\n  return (\n    <div className=\"mood-rating\">\n      {moodButtons}\n    </div>\n  )\n}\n\nexport default App;\n","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Track.js",["22"],"import { isCompositeComponent } from \"react-dom/test-utils\";\n\n// This function takes a track and creates an album cover to add to the DOM.\nfunction renderTrack(track) {\n  // newTrack.src = track.artworkUrl100;\n  // newTrack.alt = track.trackName;\n  // newTrack.title = track.trackName;\n  // console.log(\"Track\", track.artistName);\n\n  return [track.artworkUrl100, track.artistName, track.trackName];\n\n  // let today = document.querySelector('.today');\n  // today.style.backgroundImage = \"url('\" + newTrack.src + \"')\";\n  // Add the new track to the DOM\n  //let entryChart = document.querySelector(\"body > main > section > div.calendar > table > tbody\");\n  //entryChart.appendChild(newTrack);\n}\n\n// This function takes in an object of search results that contains a \"results\" array. The first track in the results array is then rendered. If no results are found, no image is produced.\n// function renderSearchResults(searchResults) {\n//   renderTrack(searchResults.results[0]);\n// }\n\nfunction renderSearchResults(searchResults) {\n  return renderTrack(searchResults.results[0]);\n}\n\n// Find the desired album artwork from the internet\nconst URL_TEMPLATE = \"https://itunes.apple.com/search?entity=song&limit=25&term={searchTerm}\";\nfunction fetchTrack(searchTerm) {\n  let url = URL_TEMPLATE.replace(\"{searchTerm}\", searchTerm);\n  return fetch(url)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (data) {\n      renderSearchResults(data);\n      // return data;\n    })\n    .catch(function (error) {\n      console.log(\"No results found.\");\n      console.log(error);\n    });\n}\n\nexport default fetchTrack;\nexport { renderTrack, renderSearchResults, fetchTrack};",{"ruleId":"23","severity":1,"message":"24","line":6,"column":10,"nodeType":"25","messageId":"26","endLine":6,"endColumn":21},{"ruleId":"27","severity":1,"message":"28","line":223,"column":14,"nodeType":"29","endLine":223,"endColumn":26},{"ruleId":"23","severity":1,"message":"30","line":1,"column":10,"nodeType":"25","messageId":"26","endLine":1,"endColumn":30},"no-unused-vars","'renderTrack' is defined but never used.","Identifier","unusedVar","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'isCompositeComponent' is defined but never used."]