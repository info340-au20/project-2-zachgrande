<<<<<<< HEAD
[{"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/App.js":"1","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/index.js":"2","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutUs.js":"3","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Form.js":"4"},{"size":6412,"mtime":1607302577197,"results":"5","hashOfConfig":"6"},{"size":720,"mtime":1607299260087,"results":"7","hashOfConfig":"6"},{"size":1035,"mtime":1607298268430,"results":"8","hashOfConfig":"6"},{"size":3001,"mtime":1607301953324,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"13ftmlp",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/App.js",["19","20","21","22","23","24"],"import React, { useState } from 'react';\nimport { Route, Switch, Link, Redirect, NavLink } from 'react-router-dom';\nimport AboutPage from './AboutUs.js';\n// import Form from './Form.js';\n//import { Button } from 'reactstrap';\n\nfunction App() {\n  // This is the state of the app, where user journal entries are maintained\n  // An entry has several components:\n  // - a title\n  // - a date\n  // - a description\n  // - a mood rating\n  // - a song\n  const [entries, modifyEntries] = useState();\n\n  const [pageDisplay, setPageDisplay] = useState(<JournalLog />)\n\n  const handleNav = (event) => {\n    console.log(event);\n    console.log(event.currentTarget.classList);\n    if (event.currentTarget.classList.contains(\"homePage\")){\n      setPageDisplay(<JournalLog />)\n    }\n    if (event.currentTarget.classList.contains(\"landingPage\")){\n      setPageDisplay(<Form entries={entries} modifyEntries={modifyEntries} />)\n    }\n    if (event.currentTarget.classList.contains(\"aboutUs\")){\n      setPageDisplay(<AboutPage />)\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"page-header\">\n        <h1>SongNotes</h1>\n\n        {/*<NavBar />*/}\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <img \n                  className=\"icon homePage\" \n                  role=\"button\" \n                  src=\"img/logotransparent.png\" \n                  alt=\"logo\"\n                  onClick={handleNav}\n                />\n              </li>\n              <li>\n                <button className=\"btn btn-primary btn-lg landingPage\" onClick={handleNav}>\n                  Make Entry\n               </button>\n              </li>\n            </ul>\n          </nav>\n         </div>\n\n\n      </header>\n\n      <main>\n        {/*<JournalLog />\n        <LandingPage />\n        <AboutPage />*/}\n        {pageDisplay}\n      </main>\n\n      <footer>\n        <div className=\"footer-copyright text-center py-3\"> &copy; INFO 340 AA -\n            <span role=\"button\" className=\"aboutUs\" onClick={handleNav}> About Us</span>\n        </div>\n    </footer>\n    </div>\n  );\n}\n\nfunction JournalLog() {\n  return(\n    <section id=\"journalLog\">\n\n      <div className=\"btn-group-sm d-flex justify-content-sm-center justify-content-lg-end p-3\" role=\"group\" aria-label=\"viewing mode buttons\">\n        <button className=\"btn btn-secondary album-btn\">Album Covers</button>\n        <button className=\"btn btn-secondary color-btn\">Mood Colors</button>\n      </div>\n\n      <div className=\"container\">    \n        <EntryLog />         \n      </div> \n\n    </section>\n  )\n}\n\nfunction EntryLog() {\n  //placeholder variables for things in the state\n  let mood = \"calm\";\n  let album = \"img/sample_album_covers/abbeyroad.jpg\";\n  let entryTitle = \"Entry Title\";\n  let date = \"date\";\n  \n  return (\n    <div className=\"card mb-4\">\n      <div className={\"card-header color \" + mood}>\n        <img className=\"today album-test\" src={album} alt=\"album cover\"/>\n        <h2 className=\"entry-title\">{entryTitle}</h2>\n        <p className=\"date\">{date}</p>\n        <button className=\"btn btn-secondary\">\n          Expand\n        </button>\n      </div>\n    </div>\n  )\n}\n\n// Similar code is in Form.js, moved here to ensure global variables update\nfunction Form(prop) {\n  // Establish our variables from the prop\n  let entries = prop.entries;\n  let modifyEntries = prop.modifyEntries;\n  // When a user submits the form, modify the state\n  let handleSubmit = (event) => {\n    event.preventDefault();\n    let userTitle = document.querySelector(\"#inputTitle\").value;\n    let userDate = document.querySelector(\"#inputDate\").value;\n    let userBody = document.querySelector(\"#inputBody\").value;\n\n    // Take the above variables ^^ and store in an object, like lines 142-144.\n\n    let newEntriesArray = [];\n\n    if (entries !== undefined) {\n      newEntriesArray = entries.map((entry) => {\n        return entry;\n      })\n    }\n    \n    // APPEND an additional entry\n    newEntriesArray.push({\n      postTitle: userTitle,\n      date: userDate,\n      dayDescription: userBody,\n      // moodRating: moodInput,\n      // song: fetchTrack(songSearch)\n    })\n\n    // CREATE a new function near the state initialization\n    // CALL the function, passing as a prop the newly created object\n\n    // Replace the old state and be done\n    modifyEntries(newEntriesArray);\n    // entries = newEntriesArray;\n  }\n\n  return (\n    <section id=\"landingPage\">\n\n      <form>\n        <div className=\"form-group\">\n          <label for=\"inputTitle\">Post Title</label>\n          <input type=\"text\" className=\"form-control form-control-lg\" id=\"inputTitle\" aria-label=\"Entry Title\" placeholder=\"What do you want to title this post?\" />\n        </div>\n        <div className=\"form-group\">\n          <label for=\"inputDate\">Day</label>\n          <input type=\"date\" id=\"inputDate\" className=\"form-control form-control-lg\" aria-label=\"Date\" required />\n          <div id=\"dateFeedback\" className=\"invalid-feedback\"></div>\n        </div>\n        <div className=\"form-group\">\n          <label for=\"inputBody\">How was your day?</label>\n          <textarea className=\"form-control\" id=\"inputBody\" rows=\"3\"></textarea>\n        </div>\n        <div className=\"form-group\">\n          <p role=\"label\">Today's Mood Rating</p>\n\n          <div className=\"mood-rating\">\n            <div aria-label=\"calm select\" className=\"moodbtn\"><img className=\"calmbtn\" src=\"img/mood_buttons/calm.jpg\" alt=\"calm\" /></div>\n            <div aria-label=\"happy select\" className=\"moodbtn\"><img className=\"happybtn\" src=\"img/mood_buttons/happy.jpg\" alt=\"happy\" /></div>\n            <div aria-label=\"anxious select\" className=\"moodbtn\"><img className=\"anxiousbtn\" src=\"img/mood_buttons/anxious.jpg\" alt=\"anxious\" /></div>\n            <div aria-label=\"sad select\" className=\"moodbtn\"><img className=\"sadbtn\" src=\"img/mood_buttons/sad.jpg\" alt=\"sad\" /></div>\n          </div>\n          <div id=\"moodFeedback\" className=\"invalid-feedback\"></div>\n        </div>\n        <div className=\"form-group\">\n          <label for=\"songSearch\">Search for Today's Song</label>\n          <span className=\"glyphicon glyphicon-search\"></span>\n          <input className=\"form-control\" type=\"text\" id=\"songSearch\" placeholder=\"Search\" aria-label=\"Search\" />\n        </div>\n        <button className=\"btn btn-primary\" id=\"submit\" onClick={handleSubmit}>Done</button>\n      </form>\n\n    </section>\n  )\n}\n\nexport default App;\n","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/index.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutUs.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Form.js",["25","26"],{"ruleId":"27","severity":1,"message":"28","line":2,"column":10,"nodeType":"29","messageId":"30","endLine":2,"endColumn":15},{"ruleId":"27","severity":1,"message":"31","line":2,"column":17,"nodeType":"29","messageId":"30","endLine":2,"endColumn":23},{"ruleId":"27","severity":1,"message":"32","line":2,"column":25,"nodeType":"29","messageId":"30","endLine":2,"endColumn":29},{"ruleId":"27","severity":1,"message":"33","line":2,"column":31,"nodeType":"29","messageId":"30","endLine":2,"endColumn":39},{"ruleId":"27","severity":1,"message":"34","line":2,"column":41,"nodeType":"29","messageId":"30","endLine":2,"endColumn":48},{"ruleId":"35","severity":1,"message":"36","line":175,"column":14,"nodeType":"37","endLine":175,"endColumn":26},{"ruleId":"27","severity":1,"message":"38","line":4,"column":7,"nodeType":"29","messageId":"30","endLine":4,"endColumn":20},{"ruleId":"35","severity":1,"message":"36","line":53,"column":14,"nodeType":"37","endLine":53,"endColumn":26},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'NavLink' is defined but never used.","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'modifyEntries' is assigned a value but never used."]
=======
<<<<<<< HEAD
[{"/Users/Gideon/Desktop/INFO 340/project-2-zachgrande/src/App.js":"1","/Users/Gideon/Desktop/INFO 340/project-2-zachgrande/src/AboutUs.js":"2","/Users/Gideon/Desktop/INFO 340/project-2-zachgrande/src/index.js":"3"},{"size":7964,"mtime":1607324016664,"results":"4","hashOfConfig":"5"},{"size":1035,"mtime":1607312908568,"results":"6","hashOfConfig":"5"},{"size":720,"mtime":1607312908569,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"pq5cd6",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Gideon/Desktop/INFO 340/project-2-zachgrande/src/App.js",["15","16","17","18","19","20","21","22","23"],"//import src from '*.avif';\nimport React, { useState } from 'react';\nimport { Route, Switch, Link, Redirect, NavLink } from 'react-router-dom';\nimport AboutPage from './AboutUs.js';\n//import Form from './Form.js';\n//import { Button } from 'reactstrap';\n\nfunction App() {\n  // This is the state of the app, where user journal entries are maintained\n  // An entry has several components:\n  // - a title\n  // - a date\n  // - a description\n  // - a mood rating\n  // - a song\n  const [entries, modifyEntries] = useState();\n\n  const [pageDisplay, setPageDisplay] = useState();\n\n  const handleNav = (event) => {\n    console.log(event);\n    console.log(event.currentTarget.classList);\n    if (event.currentTarget.classList.contains(\"homePage\")){\n      setPageDisplay(<JournalLog logs={entries}/>)\n    }\n    if (event.currentTarget.classList.contains(\"landingPage\")){\n      setPageDisplay(<Form entries={entries} modifyEntries={handleChange} />)\n    }\n    if (event.currentTarget.classList.contains(\"about-us\")){\n      console.log(entries);\n      setPageDisplay(<AboutPage />)\n    }\n  }\n\n  const handleChange = (e) => {\n    // console.log(\"Adding this to state\", e);\n    modifyEntries(e);\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"page-header\">\n        <h1>SongNotes</h1>\n\n        {/*<NavBar />*/}\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <img \n                  className=\"icon homePage\" \n                  role=\"button\" \n                  src=\"img/logotransparent.png\" \n                  alt=\"logo\"\n                  onClick={handleNav}\n                />\n              </li>\n              <li>\n                <button className=\"btn btn-primary btn-lg landingPage\" onClick={handleNav}>\n                  Make Entry\n               </button>\n              </li>\n            </ul>\n          </nav>\n         </div>\n\n\n      </header>\n\n      <main>\n        {/*<JournalLog />\n        <LandingPage />\n        <AboutPage />*/}\n        {pageDisplay}\n      </main>\n\n      <footer>\n        <div className=\"footer-copyright text-center py-3\"> &copy; INFO 340 AA -\n            <span role=\"button\" className=\"about-us\" onClick={handleNav}> About Us</span>\n        </div>\n    </footer>\n    </div>\n  );\n}\n\nfunction JournalLog(prop) {\n  let count = 0;\n  return(\n    <section id=\"journalLog\">\n\n      <div className=\"btn-group-sm d-flex justify-content-sm-center justify-content-lg-end p-3\" role=\"group\" aria-label=\"viewing mode buttons\">\n        <button className=\"btn btn-secondary album-btn\">Album Covers</button>\n        <button className=\"btn btn-secondary color-btn\">Mood Colors</button>\n      </div>\n\n      <div className=\"container\">    \n        {prop.logs.map((log) => {\n            //insert id of sorts\n            count++;\n            return <EntryLog key={count} log={log} />\n          })}      \n      </div> \n\n    </section>\n  )\n}\n\nfunction EntryLog(prop) {\n  //placeholder variables for things in the state\n  let mood = \"calm\";\n  let album = \"img/sample_album_covers/abbeyroad.jpg\";\n  let entryTitle = \"Entry Title\";\n  let date = \"date\";\n  let index = prop.key;\n  \n  return (\n    <div className=\"card mb-4\">\n      <div className={\"card-header color \" + mood}>\n        <img className=\"today album-test\" src={album} alt=\"album cover\"/>\n        <h2 className=\"entry-title\">{entryTitle}</h2>\n        <p className=\"date\">{date}</p>\n        <button className=\"btn btn-secondary\">\n          Expand\n        </button>\n      </div>\n    </div>\n  )\n}\n\n// Similar code is in Form.js, moved here to ensure global variables update\nfunction Form(prop) {\n  // Establish our variables from the prop\n  let entries = prop.entries;\n  let modifyEntries = prop.modifyEntries;\n  // When a user submits the form, modify the state\n\n  let handleSubmit = (event) => {\n    event.preventDefault();\n    let userTitle = document.querySelector(\"#inputTitle\").value;\n    let userDate = document.querySelector(\"#inputDate\").value;\n    let userBody = document.querySelector(\"#inputBody\").value;\n\n    let newEntriesArray = [];\n\n    if (entries !== undefined) {\n      newEntriesArray = entries.map((entry) => {\n        return entry;\n      })\n    }\n    \n    // APPEND an additional entry\n    newEntriesArray.push({\n      postTitle: userTitle,\n      date: userDate,\n      dayDescription: userBody,\n      //moodRating: moodInput,\n      // song: fetchTrack(songSearch)\n    })\n\n    // Replace the old state and be done\n    // modifyEntries(newEntriesArray);\n    entries = newEntriesArray;\n    console.log(entries);\n  }\n\n  return (\n    <section id=\"landingPage\">\n\n      <form>\n        <div className=\"form-group\">\n          <label for=\"inputTitle\">Post Title</label>\n          <input type=\"text\" className=\"form-control form-control-lg\" id=\"inputTitle\" aria-label=\"Entry Title\" placeholder=\"What do you want to title this post?\" />\n        </div>\n        <div className=\"form-group\">\n          <label for=\"inputDate\">Day</label>\n          <input type=\"date\" id=\"inputDate\" className=\"form-control form-control-lg\" aria-label=\"Date\" required />\n          <div id=\"dateFeedback\" className=\"invalid-feedback\"></div>\n        </div>\n        <div className=\"form-group\">\n          <label for=\"inputBody\">How was your day?</label>\n          <textarea className=\"form-control\" id=\"inputBody\" rows=\"3\"></textarea>\n        </div>\n        <div className=\"form-group\">\n          <p role=\"label\">Today's Mood Rating</p>\n          {/*<div className=\"mood-rating\">\n            <div aria-label=\"calm select\" className=\"moodbtn\"><img onClick={handleClick} className=\"calmbtn\" src=\"img/mood_buttons/calm.jpg\" alt=\"calm\" /></div>\n            <div aria-label=\"happy select\" className=\"moodbtn\"><img onClick={handleClick} className=\"happybtn\" src=\"img/mood_buttons/happy.jpg\" alt=\"happy\" /></div>\n            <div aria-label=\"anxious select\" className=\"moodbtn\"><img onClick={handleClick} className=\"anxiousbtn\" src=\"img/mood_buttons/anxious.jpg\" alt=\"anxious\" /></div>\n            <div aria-label=\"sad select\" className=\"moodbtn\"><img onClick={handleClick} className=\"sadbtn\" src=\"img/mood_buttons/sad.jpg\" alt=\"sad\" /></div>\n          </div>*/}\n          <MoodSelect />\n          <div id=\"moodFeedback\" className=\"invalid-feedback\"></div>\n        </div>\n        <div className=\"form-group\">\n          <label for=\"songSearch\">Search for Today's Song</label>\n          <span className=\"glyphicon glyphicon-search\"></span>\n          <input className=\"form-control\" type=\"text\" id=\"songSearch\" placeholder=\"Search\" aria-label=\"Search\" />\n        </div>\n        <button className=\"btn btn-primary\" id=\"submit\" onClick={handleSubmit}>Done</button>\n      </form>\n\n    </section>\n  )\n}\n\nfunction MoodSelect() {\n\n  let moodOptions = [\n    {id:'calm', selected:false},\n    {id:'happy', selected:false},\n    {id:'anxious', selected:false},\n    {id:'sad', selected:false} \n  ];\n\n  const [moodInput, setMoodInput] = useState();\n  const handleClick = (event) => {\n    let mood = event.currentTarget.classList.value;\n    event.currentTarget.src = \"img/mood_buttons/\" + mood + \"_clicked\" + \".jpg\";\n    event.currentTarget.alt = mood + \"selected\"; \n    setMoodInput(mood);\n  }\n  console.log(moodInput) //need to pass this to the parent component\n\n  let selectText = \"\";\n  let clickText = \"\";\n  let moodButtons = moodOptions.map((obj) => {\n    if(obj.id === moodInput){\n      obj.selected = true;\n    } else {\n      obj.selected = false;\n    }\n    if (obj.selected) {\n      selectText = \" selected\"\n      clickText = \"_clicked\"\n    } else {\n      selectText = \"\"\n      clickText = \"\"\n    }\n    return (\n      <div aria-label={obj.id + \"select\"} className=\"moodbtn\">\n        <img \n          onClick={handleClick} \n          className={obj.id} \n          src={\"img/mood_buttons/\"+ obj.id + clickText + \".jpg\"} \n          alt={obj.id + selectText}\n        />\n      </div>\n    )\n  })\n  \n  return (\n    <div className=\"mood-rating\">\n      {moodButtons}\n    </div>\n  )\n}\n\nexport default App;\n","/Users/Gideon/Desktop/INFO 340/project-2-zachgrande/src/AboutUs.js",[],"/Users/Gideon/Desktop/INFO 340/project-2-zachgrande/src/index.js",[],{"ruleId":"24","severity":1,"message":"25","line":3,"column":10,"nodeType":"26","messageId":"27","endLine":3,"endColumn":15},{"ruleId":"24","severity":1,"message":"28","line":3,"column":17,"nodeType":"26","messageId":"27","endLine":3,"endColumn":23},{"ruleId":"24","severity":1,"message":"29","line":3,"column":25,"nodeType":"26","messageId":"27","endLine":3,"endColumn":29},{"ruleId":"24","severity":1,"message":"30","line":3,"column":31,"nodeType":"26","messageId":"27","endLine":3,"endColumn":39},{"ruleId":"24","severity":1,"message":"31","line":3,"column":41,"nodeType":"26","messageId":"27","endLine":3,"endColumn":48},{"ruleId":"24","severity":1,"message":"32","line":115,"column":7,"nodeType":"26","messageId":"27","endLine":115,"endColumn":12},{"ruleId":"24","severity":1,"message":"33","line":135,"column":7,"nodeType":"26","messageId":"27","endLine":135,"endColumn":20},{"ruleId":"34","severity":1,"message":"35","line":185,"column":14,"nodeType":"36","endLine":185,"endColumn":26},{"ruleId":"37","severity":1,"message":"38","line":219,"column":71,"nodeType":"39","messageId":"40","endLine":219,"endColumn":72},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'NavLink' is defined but never used.","'index' is assigned a value but never used.","'modifyEntries' is assigned a value but never used.","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat"]
=======
[{"/Users/rebeccahaynes/Desktop/project-2-zachgrande/src/AboutUs.js":"1","/Users/rebeccahaynes/Desktop/project-2-zachgrande/src/App.js":"2"},{"size":1035,"mtime":1607302410286,"results":"3","hashOfConfig":"4"},{"size":7649,"mtime":1607321051253,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yt5yd2",{"filePath":"8","messages":"9","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/rebeccahaynes/Desktop/project-2-zachgrande/src/AboutUs.js",[],"/Users/rebeccahaynes/Desktop/project-2-zachgrande/src/App.js",["10","11","12","13","14","15","16"],{"ruleId":"17","severity":1,"message":"18","line":3,"column":10,"nodeType":"19","messageId":"20","endLine":3,"endColumn":15},{"ruleId":"17","severity":1,"message":"21","line":3,"column":17,"nodeType":"19","messageId":"20","endLine":3,"endColumn":23},{"ruleId":"17","severity":1,"message":"22","line":3,"column":25,"nodeType":"19","messageId":"20","endLine":3,"endColumn":29},{"ruleId":"17","severity":1,"message":"23","line":3,"column":31,"nodeType":"19","messageId":"20","endLine":3,"endColumn":39},{"ruleId":"17","severity":1,"message":"24","line":3,"column":41,"nodeType":"19","messageId":"20","endLine":3,"endColumn":48},{"ruleId":"17","severity":1,"message":"25","line":123,"column":7,"nodeType":"19","messageId":"20","endLine":123,"endColumn":20},{"ruleId":"26","severity":1,"message":"27","line":173,"column":14,"nodeType":"28","endLine":173,"endColumn":26},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'NavLink' is defined but never used.","'modifyEntries' is assigned a value but never used.","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute"]
>>>>>>> 7a041d0be454f81024cb21aaee2d8e09ea058b3d
>>>>>>> ef653936e8096736ca0e29a289ca81ec1f8e91f3
