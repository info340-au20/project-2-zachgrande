[{"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/App.js":"1","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Entry.js":"2","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutEntry.js":"3"},{"size":6960,"mtime":1608189804680,"results":"4","hashOfConfig":"5"},{"size":1110,"mtime":1608184468044,"results":"6","hashOfConfig":"5"},{"size":1404,"mtime":1608189538807,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"13ftmlp",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/App.js",["15","16"],"import React, { useState, useEffect } from 'react';\nimport { Route, Switch, Link, Redirect, NavLink } from 'react-router-dom';\nimport NavigationBar from './NavigationBar.js';\nimport AboutPage from './AboutUs.js';\nimport Form from './Form.js';\nimport JournalLog from './JournalLog.js';\nimport MoodSelect from './MoodSelect.js';\nimport AboutEntry from './AboutEntry.js';\nimport { Spinner } from 'reactstrap';\nimport firebase from 'firebase/app';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport { Helmet } from 'react-helmet';\n\n\nconst uiConfig = {\n  signInOptions: [\n    {\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      requireDisplayName: true\n    }\n  ],\n  credentialHelper: 'none',\n  signInFlow: 'popup',\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false,\n  }\n};\n\nfunction App() {\n  // This is the state of the app, where user journal entries are maintained\n  // An entry has several components:\n  // - a title\n  // - a date\n  // - a description\n  // - a mood rating\n  // - a song (artwork, artist name, song title)\n  // - a time stamp\n  // - a user ID (who posted it)\n  const [entries, modifyEntries] = useState([]);\n  const [user, setUser] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const authUnregisterFunction = firebase.auth().onAuthStateChanged((firebaseUser) => {\n      setUser(firebaseUser);\n      setIsLoading(false);\n    })\n\n    return function cleanup() {\n      authUnregisterFunction();\n    }\n  })\n\n  const handleSignOut = () => {\n    firebase.auth().signOut();\n  }\n\n  const handleChange = (e) => {\n    modifyEntries(e);\n  }\n\n  useEffect(() => {\n    const entryRef = firebase.database().ref('entries');\n    entryRef.on('value', (snapshot) => {\n      const entriesObj = snapshot.val(); // convert to Javascript value\n      // If our entries array is empty, then we can't iterate over empty keys\n      // This conditional will ensure we skip the following if there are no entries\n      if (entriesObj === null) {\n        modifyEntries([]);\n        return null;\n      }\n      let objectKeys = Object.keys(entriesObj);\n      let entriesArray = objectKeys.map((key) => {\n        let singleEntryObj = entriesObj[key];\n        singleEntryObj.key = key // IMPORTANT\n        return singleEntryObj;\n      })\n      modifyEntries(entriesArray);\n    })\n  }, [])\n\n  const renderJournalLog = (routerProps) => {\n    const userID = user.uid;\n\n    // The array of journal entries for this session's specific user\n    let thisEntryArray = [];\n    if (entries.length !== 0) {\n      for (let i = 0; i < entries.length; i++) {\n        let currentEntry = entries[i];\n        if (currentEntry.user === userID) {\n          thisEntryArray.push(currentEntry);\n        }\n      }\n    }\n\n    if (thisEntryArray.length === 0) {\n      return (\n        <div>\n          <p>You have not created any journal entries! You can create an entry by visiting\n            <NavLink to=\"create-entry\" className=\"nav-link\" id=\"mainCAE\" activeClassName={\"activeLink\"}>Create an Entry</NavLink>\n          </p>\n        </div>\n      )\n    } else {\n      return <JournalLog {...routerProps} logs={thisEntryArray} currentUser={user} />\n    }\n  }\n\n  // Pass mood from MoodSelect\n  const [moodEntry, setMoodEntry] = useState();\n  const handleMoodInput = (e) => {\n    setMoodEntry(e);\n  }  \n  const renderMoodSelect = (routerProps) => {\n    function MoodErrorCheck() {\n      if(moodEntry === undefined){\n        return (<button type=\"button\" className=\"btn btn-lg btn-secondary\" disabled><Link to=\"/form\" onClick={e => e.preventDefault()}>Continue</Link></button>)\n      } else {\n        return (<button type=\"button\" className=\"btn btn-lg btn-secondary\"><Link to=\"/form\">Continue</Link></button>)\n      }\n    }\n    return (\n      <div className=\"form-group\">\n        <p role=\"label\">Please select a mood for the entry color scheme:</p>\n        <MoodSelect {...routerProps} moodEntry={handleMoodInput}/>\n        <div id=\"moodFeedback\" className=\"invalid-feedback\"></div>\n        <MoodErrorCheck />\n      </div>\n    )\n  }\n  \n  const [formValid, setFormValidity] = useState();\n  const handleFormValidation = (e) => {\n    setFormValidity(e);\n  }\n  const renderForm = (routerProps) => {\n    function FormErrorCheck() {\n      if(formValid === false){\n        return (<button type=\"button\" className=\"btn btn-lg btn-secondary\" disabled><Link to=\"/\" onClick={e => e.preventDefault()}>Home</Link></button>)\n      } else {\n        return (<button type=\"button\" className=\"btn btn-lg btn-secondary\"><Link to=\"/\">Home</Link></button>)\n      }\n    }\n    return (\n      <div>\n        <Form {...routerProps} entries={entries} currentUser={user} completionAction={sendUserHome} mood={moodEntry} formValid={handleFormValidation}/>\n        <FormErrorCheck /> \n      </div>\n    )\n  }\n\n  const renderAboutEntry = routerProps => {\n    return (\n      <AboutEntry {...routerProps} entries={entries} />\n    )\n  }\n\n\n  const sendUserHome = () => {\n    return <Redirect to=\"/\" />\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center\">\n        <Spinner color=\"primary\">\n        </Spinner>\n        <p>Loading...</p>\n      </div>\n    )\n  }\n\n  let content = null;\n  if (!user) {\n    content = (\n      <div className=\"container\">\n        <h1>Sign Up</h1>\n        <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n      </div>\n    )\n  } else {\n    content = (\n      <div>\n        <header className=\"page-header\">\n          <h1><Link to=\"/\" id='title'>SongNotes</Link></h1>\n\n          {user &&\n            <button className=\"btn btn-secondary signOutBtn\" onClick={handleSignOut}>\n              Log Out {user.displayName}\n            </button>\n          }\n\n          <NavigationBar />\n        </header>\n\n        <main>\n          <nav className=\"container-fluid\">\n            <Switch>\n              <Route exact path=\"/\" render={renderJournalLog} />\n              <Route path=\"/create-entry\" render={renderMoodSelect} />\n              <Route path=\"/form\" render={renderForm} />\n              <Route path=\"/about-us\" component={AboutPage} />\n              <Route path=\"/post/:entryKey\" render={renderAboutEntry} />\n              <Redirect to=\"/\" />\n            </Switch>\n          </nav>\n        </main>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>SongNotes</title>\n        <meta name=\"author\" content=\"INFO 340 AA\" />\n        <meta name=\"description\" content=\"A Journaling App with Music\" />\n      </Helmet>\n\n      {content}\n\n      <footer>\n        <div className=\"footer-copyright text-center py-2\"> &copy; INFO 340 AA -\n          <NavLink exact to=\"/about-us\" className=\"nav-link-1\" activeClassName={\"activeLink\"} id='footerAU'> About Us</NavLink>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/Entry.js",[],"/Users/zachgrande/Code/info340-finalproject/project-2-zachgrande/src/AboutEntry.js",[],{"ruleId":"17","severity":1,"message":"18","line":61,"column":9,"nodeType":"19","messageId":"20","endLine":61,"endColumn":21},{"ruleId":"21","severity":1,"message":"22","line":127,"column":12,"nodeType":"23","endLine":127,"endColumn":24},"no-unused-vars","'handleChange' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute"]